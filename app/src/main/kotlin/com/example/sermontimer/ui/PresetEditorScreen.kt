package com.example.sermontimer.ui

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.wear.compose.foundation.lazy.ScalingLazyColumn
import androidx.wear.compose.material.*
import com.example.sermontimer.R
import com.example.sermontimer.domain.model.Preset

@Composable
fun PresetEditorScreen(
    preset: Preset?,
    onSave: (Preset) -> Unit,
    onCancel: () -> Unit,
    onDelete: ((Preset) -> Unit)? = null,
) {
    val isEditing = preset != null

    // Form state
    var introMinutes by remember { mutableStateOf((preset?.introSec ?: 300) / 60) }
    var mainMinutes by remember { mutableStateOf((preset?.mainSec ?: 1200) / 60) }
    var outroMinutes by remember { mutableStateOf((preset?.outroSec ?: 300) / 60) }
    var title by remember {
        mutableStateOf(
            preset?.title ?: if (preset == null) "$introMinutes-$mainMinutes-$outroMinutes" else ""
        )
    }

    // Delete confirmation state
    var showDeleteConfirmation by remember { mutableStateOf(false) }

    // Track if we're in auto-update mode for existing presets
    var isAutoTitleMode by remember(preset?.id) {
        mutableStateOf(preset?.let { it.title == "${it.introSec / 60}-${it.mainSec / 60}-${it.outroSec / 60}" } ?: true)
    }

    // Track the last auto-generated title to detect manual changes
    var lastAutoGeneratedTitle by remember { mutableStateOf("$introMinutes-$mainMinutes-$outroMinutes") }

    // Auto-update title when durations change
    LaunchedEffect(introMinutes, mainMinutes, outroMinutes) {
        val newAutoTitle = "$introMinutes-$mainMinutes-$outroMinutes"

        if (preset == null || isAutoTitleMode) {
            // Always auto-update for new presets, or when in auto-title mode for existing presets
            title = newAutoTitle
            lastAutoGeneratedTitle = newAutoTitle
        } else {
            // If not in auto-mode, update the last auto-generated title for reference
            lastAutoGeneratedTitle = newAutoTitle
        }
    }

    // Detect manual title changes and disable auto-update mode
    LaunchedEffect(title) {
        if (preset != null && title != lastAutoGeneratedTitle) {
            // User has manually changed the title, disable auto-update
            isAutoTitleMode = false
        }
    }

    // Validation
    val titleError = title.isBlank()
    val introError = introMinutes < 0
    val mainError = mainMinutes < 0
    val outroError = outroMinutes < 0
    val hasErrors = titleError || introError || mainError || outroError

    // Show either the main editor or delete confirmation
    if (showDeleteConfirmation && preset != null) {
        // Simple delete confirmation screen
        Scaffold(
            timeText = { TimeText() }
        ) {
            ScalingLazyColumn(
                modifier = Modifier.fillMaxSize(),
                contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                item {
                    Text(
                        text = stringResource(R.string.delete_preset_title),
                        style = MaterialTheme.typography.title3,
                        textAlign = TextAlign.Center,
                        modifier = Modifier.fillMaxWidth()
                    )
                }

                item {
                    Text(
                        text = stringResource(R.string.delete_preset_message, preset.title),
                        style = MaterialTheme.typography.body2,
                        textAlign = TextAlign.Center,
                        modifier = Modifier.fillMaxWidth()
                    )
                }

                item {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        Button(
                            onClick = { showDeleteConfirmation = false },
                            modifier = Modifier.weight(1f),
                            colors = ButtonDefaults.secondaryButtonColors()
                        ) {
                            Text(
                                text = stringResource(R.string.delete_preset_cancel),
                                textAlign = TextAlign.Center,
                                modifier = Modifier.fillMaxWidth()
                            )
                        }

                        Button(
                            onClick = {
                                showDeleteConfirmation = false
                                onDelete?.invoke(preset)
                            },
                            modifier = Modifier.weight(1f),
                            colors = ButtonDefaults.buttonColors(
                                backgroundColor = MaterialTheme.colors.error,
                                contentColor = MaterialTheme.colors.onError
                            )
                        ) {
                            Text(
                                text = stringResource(R.string.delete_preset_confirm),
                                textAlign = TextAlign.Center,
                                modifier = Modifier.fillMaxWidth()
                            )
                        }
                    }
                }
            }
        }
    } else {
        // Main editor screen
        Scaffold(
            timeText = { TimeText() }
        ) {
            ScalingLazyColumn(
                modifier = Modifier.fillMaxSize(),
                contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                item {
                    // Title
                    Text(
                        text = if (isEditing) {
                            stringResource(R.string.preset_editor_title_edit, preset?.title ?: "")
                        } else {
                            stringResource(R.string.preset_editor_title_new)
                        },
                        style = MaterialTheme.typography.title3,
                        textAlign = TextAlign.Center,
                        modifier = Modifier.fillMaxWidth()
                    )
                }

                item {
                    // Title input field
                    Column(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text(
                            text = stringResource(R.string.preset_title_label),
                            style = MaterialTheme.typography.caption1,
                            modifier = Modifier.padding(bottom = 4.dp)
                        )
                        Text(
                            text = if (title.isNotBlank()) title else stringResource(R.string.tap_to_edit),
                            style = MaterialTheme.typography.body1,
                            textAlign = TextAlign.Center,
                            modifier = Modifier
                                .fillMaxWidth()
                                .background(
                                    MaterialTheme.colors.surface.copy(alpha = 0.1f),
                                    RoundedCornerShape(8.dp)
                                )
                                .padding(horizontal = 12.dp, vertical = 8.dp)
                        )
                        Text(
                            text = stringResource(R.string.edit_name_hint),
                            style = MaterialTheme.typography.caption2,
                            color = MaterialTheme.colors.onSurface.copy(alpha = 0.6f),
                            modifier = Modifier.padding(top = 4.dp)
                        )
                    }
                }

                if (titleError) {
                    item {
                        Text(
                            text = stringResource(R.string.preset_title_error),
                            style = MaterialTheme.typography.caption2,
                            color = MaterialTheme.colors.error,
                            modifier = Modifier.fillMaxWidth(),
                            textAlign = TextAlign.Center
                        )
                    }
                }

                item {
                    // Duration inputs
                    DurationInputField(
                        label = stringResource(R.string.segment_intro),
                        value = introMinutes,
                        onValueChange = { introMinutes = it },
                        isError = introError
                    )
                }

                item {
                    DurationInputField(
                        label = stringResource(R.string.segment_main),
                        value = mainMinutes,
                        onValueChange = { mainMinutes = it },
                        isError = mainError
                    )
                }

                item {
                    DurationInputField(
                        label = stringResource(R.string.segment_outro),
                        value = outroMinutes,
                        onValueChange = { outroMinutes = it },
                        isError = outroError
                    )
                }

                item {
                    // Action buttons (Cancel and Save)
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        Button(
                            onClick = onCancel,
                            modifier = Modifier.weight(1f),
                            colors = ButtonDefaults.secondaryButtonColors()
                        ) {
                            Text(
                                text = stringResource(R.string.action_cancel),
                                textAlign = TextAlign.Center,
                                modifier = Modifier.fillMaxWidth()
                            )
                        }

                        Button(
                            onClick = {
                                if (!hasErrors) {
                                    val newPreset = if (isEditing) {
                                        preset?.copy(
                                            title = title,
                                            introSec = introMinutes * 60,
                                            mainSec = mainMinutes * 60,
                                            outroSec = outroMinutes * 60
                                        )
                                    } else {
                                        Preset(
                                            id = generatePresetId(),
                                            title = title,
                                            introSec = introMinutes * 60,
                                            mainSec = mainMinutes * 60,
                                            outroSec = outroMinutes * 60
                                        )
                                    }
                                    newPreset?.let { onSave(it) }
                                }
                            },
                            modifier = Modifier.weight(1f),
                            enabled = !hasErrors
                        ) {
                            Text(
                                text = stringResource(R.string.action_save),
                                textAlign = TextAlign.Center,
                                modifier = Modifier.fillMaxWidth()
                            )
                        }
                    }
                }

                // Delete button (only for editing existing presets)
                if (isEditing && onDelete != null) {
                    item {
                        Button(
                            onClick = { showDeleteConfirmation = true },
                            modifier = Modifier.fillMaxWidth(),
                            colors = ButtonDefaults.buttonColors(
                                backgroundColor = MaterialTheme.colors.error,
                                contentColor = MaterialTheme.colors.onError
                            )
                        ) {
                            Row(
                                horizontalArrangement = Arrangement.Center,
                                verticalAlignment = Alignment.CenterVertically,
                                modifier = Modifier.fillMaxWidth()
                            ) {
                                Icon(
                                    imageVector = Icons.Filled.Delete,
                                    contentDescription = null
                                )
                                Spacer(modifier = Modifier.width(8.dp))
                                Text(
                                    text = stringResource(R.string.action_delete),
                                    textAlign = TextAlign.Center
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

@Composable
private fun DurationInputField(
    label: String,
    value: Int,
    onValueChange: (Int) -> Unit,
    isError: Boolean
) {
    Column(
        modifier = Modifier.fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "$label: $value ${stringResource(R.string.minutes_label)}",
            style = MaterialTheme.typography.body1,
            textAlign = TextAlign.Center
        )

        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ) {
            CompactButton(
                onClick = { if (value > 0) onValueChange(value - 1) },
                colors = ButtonDefaults.secondaryButtonColors()
            ) {
                Text("-")
            }

            Spacer(modifier = Modifier.width(16.dp))

            CompactButton(
                onClick = { onValueChange(value + 1) },
                colors = ButtonDefaults.secondaryButtonColors()
            ) {
                Text("+")
            }
        }

        if (isError) {
            Text(
                text = stringResource(R.string.duration_error),
                style = MaterialTheme.typography.caption2,
                color = MaterialTheme.colors.error,
                textAlign = TextAlign.Center
            )
        }
    }
}

private fun generatePresetId(): String {
    return "preset_${System.currentTimeMillis()}"
}
